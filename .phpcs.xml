<?xml version="1.0"?>
<ruleset name="WordPress-VC4A">
    <description>The code standards for vc4a.</description>
    <!-- WordPress-Docs Standards. -->
    <rule ref="WordPress-Docs"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
    <!-- Expected 0 blank lines after opening function brace. -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />

    <!-- Opening brace should be on a new line -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman">
        <properties>
            <property name="checkFunctions" value="true" />
            <property name="checkClosures" value="true" />
        </properties>
    </rule>

    <!-- Covers rule: Put spaces on both sides of the opening and closing parenthesis of
     if, elseif, foreach, for, and switch blocks. -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose">
        <severity>0</severity>
    </rule>

    <!-- Covers rule: Call a function, like so: my_function( $param1, func_param( $param2 ) ); -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>

            <!-- ... and for multi-line function calls, there should only be one parameter per line. -->
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>


    <!-- Rule: Perform logical comparisons, like so: if ( ! $foo ) { -->

    <!-- Covers rule: Type casts must be lowercase. Always prefer the short form
         of type casts, (int) instead of (integer) and (bool) rather than (boolean).
         For float casts use (float). -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <rule ref="WordPress.WhiteSpace.CastStructureSpacing"/>

    <!-- Covers rule: ... array items, only include a space around the index if it is a variable. -->
    <rule ref="WordPress.Arrays.ArrayKeySpacingRestrictions"/>

    <!-- Rule: In a switch block, there must be no space before the colon for a case statement. -->
    <!-- Covered by the PSR2.ControlStructures.SwitchDeclaration sniff. -->

    <!-- Rule: Similarly, there should be no space before the colon on return type declarations. -->

    <!-- Covers rule: Unless otherwise specified, parentheses should have spaces inside of them. -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Allow only spaces -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent" />
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="PEAR.Commenting.InlineComment"/>
    <!-- Visibility MUST be declared on all methods. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <!-- Method names MUST NOT be prefixed with a single underscore to indicate protected or private visibility. That is, an underscore prefix explicitly has no meaning. -->
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <!-- Ternary operator must be multi-line if exceeds limit -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator">
        <properties>
            <property name="lineLengthLimit" value="100" />
        </properties>
    </rule>
    <!-- Strict type return for methods -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableParameterTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversableReturnTypeHintSpecification"/>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="1" />
        </properties>
    </rule>
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <type>error</type>
        <message>Method name "%s" must not be prefixed with an underscore to indicate visibility</message>
    </rule>
    <!-- WordPress Rules -->
    <!-- Generic array layout check. -->
    <!-- Covers rule: For associative arrays, each item should start on a new line
         when the array contains more than one item.
         Also covers various single-line array whitespace issues. -->
    <rule ref="WordPress.Arrays.ArrayDeclarationSpacing"/>

    <!-- Covers rule: Note the comma after the last array item: this is recommended. -->
    <rule ref="WordPress.Arrays.CommaAfterArrayItem"/>

    <!--
    #############################################################################
    Handbook: PHP - Regular Expressions.
    Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#regular-expressions
    #############################################################################
    -->
    <!-- Covers rule: Perl compatible regular expressions should be used in preference
         to their POSIX counterparts. -->
    <rule ref="WordPress.PHP.POSIXFunctions"/>

    <!--
    #############################################################################
    Handbook: PHP - No Shorthand PHP Tags.
    Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#no-shorthand-php-tags
    #############################################################################
    -->
    <!-- Covers rule: Never use shorthand PHP start tags. Always use full PHP tags. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>
    <rule ref="Generic.PHP.DisallowAlternativePHPTags"/>

    <rule ref="WordPress.PHP.TypeCasts"/>

    <!--
    #############################################################################
    Handbook: PHP - Formatting SQL statements.
    Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#formatting-sql-statements
    #############################################################################
    -->
    <!-- Rule: Always capitalize the SQL parts of the statement like UPDATE or WHERE.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/639 -->

    <!-- Rule: Functions that update the database should expect their parameters to lack
         SQL slash escaping when passed.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/640 -->

    <!-- Rule: in $wpdb->prepare - %s is used for string placeholders and %d is used for integer
         placeholders. Note that they are not 'quoted'! -->
    <rule ref="WordPress.DB.PreparedSQLPlaceholders"/>

    <!-- Covers rule:  $wpdb->prepare()... The benefit of this is that we don't have to remember
         to manually use esc_sql(), and also that it is easy to see at a glance whether something
         has been escaped or not, because it happens right when the query happens. -->
    <rule ref="WordPress.DB.PreparedSQL"/>


    <!--
    #############################################################################
    Handbook: PHP - Database Queries.
    Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#database-queries
    #############################################################################
    -->
    <!-- Covers rule: Avoid touching the database directly. -->
    <rule ref="WordPress.DB.RestrictedFunctions"/>
    <rule ref="WordPress.DB.RestrictedClasses"/>

    <rule ref="WordPress.PHP.RestrictedPHPFunctions"/>

    <!--
    #############################################################################
    Handbook: PHP - Don't extract().
    Ref: https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#dont-extract
    #############################################################################
    -->
    <rule ref="WordPress.PHP.DontExtract"/>
    <rule ref="WordPress.PHP.NoSilencedErrors"/>
    <!-- There should be no empty statements, i.e. lone semi-colons or open/close tags without content. -->
    <rule ref="WordPress.CodeAnalysis.EmptyStatement"/>

    <!-- Lowercase PHP constants, like true, false and null. -->
    <!-- https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/#naming-conventions -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!--
    #############################################################################
    Not in the coding standard handbook: WP specific sniffs.
    Ref: https://make.wordpress.org/core/handbook/best-practices/internationalization/ (limited info)
    Ref: https://developer.wordpress.org/plugins/internationalization/ (more extensive)
    #############################################################################
    -->
    <!-- Check for correct usage of the WP i18n functions. -->
    <rule ref="WordPress.WP.I18n"/>

    <!-- Check for correct spelling of WordPress. -->
    <rule ref="WordPress.WP.CapitalPDangit"/>

    <rule ref="WordPress.Security.EscapeOutput"/>


    <!-- Encourage use of wp_safe_redirect() to avoid open redirect vulnerabilities.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/1264 -->
    <rule ref="WordPress.Security.SafeRedirect"/>

    <!-- Verify that a nonce check is done before using values in superglobals.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/73 -->
    <rule ref="WordPress.Security.NonceVerification"/>


    <rule ref="WordPress.PHP.DiscouragedPHPFunctions"/>
    <rule ref="WordPress.WP.DeprecatedFunctions"/>
    <rule ref="WordPress.WP.DeprecatedClasses"/>
    <rule ref="WordPress.WP.DeprecatedParameters"/>
    <rule ref="WordPress.WP.DeprecatedParameterValues"/>
    <rule ref="WordPress.WP.AlternativeFunctions"/>
    <rule ref="WordPress.WP.DiscouragedConstants"/>
    <rule ref="WordPress.WP.DiscouragedFunctions"/>

    <!-- Scripts & style should be enqueued.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/35 -->
    <rule ref="WordPress.WP.EnqueuedResources"/>

    <!-- Warn against overriding WP global variables.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/26 -->
    <rule ref="WordPress.WP.GlobalVariablesOverride"/>

    <!-- Encourage the use of strict ( === and !== ) comparisons.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/242 -->
    <rule ref="WordPress.PHP.StrictComparisons"/>

    <!-- Check that in_array() and array_search() use strict comparisons.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/399
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/503 -->
    <rule ref="WordPress.PHP.StrictInArray"/>

    <!-- Check enqueue and register styles and scripts to have version and in_footer parameters explicitly set.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1146 -->
    <rule ref="WordPress.WP.EnqueuedResourceParameters"/>

    <!-- Make the translators comment check which is included in core stricter. -->
    <rule ref="WordPress.WP.I18n.MissingTranslatorsComment">
        <type>error</type>
    </rule>
    <rule ref="WordPress.WP.I18n.TranslatorsCommentWrongStyle">
        <type>error</type>
    </rule>

    <!-- Verify that everything in the global namespace is prefixed. -->
    <rule ref="WordPress.NamingConventions.PrefixAllGlobals"/>

    <!-- Check that object instantiations always have braces & are not assigned by reference.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/919
         Note: there is a similar upstream sniff `PSR12.Classes.ClassInstantiation`, however
         that sniff:
         - does not cover JS files;
         - does not demand parentheses for PHP anonymous classes;
         - does not check the whitespace between the class name and the parentheses;
         - does not check for PHP new by reference.
         For those reasons, the WPCS version should remain. -->
    <rule ref="WordPress.Classes.ClassInstantiation"/>

    <!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1157 -->
    <rule ref="WordPress.Security.PluginMenuSlug"/>
    <rule ref="WordPress.WP.CronInterval"/>
    <rule ref="WordPress.WP.PostsPerPage"/>
    <rule ref="WordPress.WP.TimezoneChange"/>

    <!-- Verify some regex best practices.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1371 -->
    <rule ref="WordPress.PHP.PregQuoteDelimiter"/>

    <!-- The Core ruleset respects the whitelist. For `Extra` the sniff is stricter.
         https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/1450 -->
    <rule ref="WordPress.PHP.NoSilencedErrors">
        <properties>
            <property name="use_default_whitelist" value="false"/>
        </properties>
    </rule>
</ruleset>
